

def total():
    try:
        import time
        import json
        import base64
        import matplotlib.pylab as plt
        from PIL import Image
        import cv2
        import os
        import tkinter
        import numpy as np
        from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
        from matplotlib.backend_bases import key_press_handler
        from matplotlib.figure import Figure
    except OSError as e:
        print(e)


    
    serve=[]
    toss=[]
    squat=[]
    situp=[]
    stick=[]
    time_type1=""
    time_type2=""
    action=""
    data_type=""
    end=0
    time_choose1=5
    time_choose2=5
    action_choose3=5
    data_choose=1
    search=[]
    search1='有'
    #tkinter
    root = tkinter.Tk()  # 创建tkinter的主窗口
    root.title("在tkinter中使用matplotlib")
    f = Figure(figsize=(5, 4), dpi=100)
    a = f.add_subplot(111)  # 添加子图:1行1列第1个
    
    timeset=set()
    total=dict()
    
    while (1):
        action=input("請輸入動作action:toss serve 深蹲 仰臥起坐 棒式 全部")
        print(action)
        if action=="toss" and search1=='有':
            action_choose3=0
            search.append(toss)
            search1=input("還有嗎?(有/沒有)")
        if action=="serve"and search1=='有':
            print(search1)
            action_choose3=1
            search.append(serve)
            search1=input("還有嗎?(有/沒有)")
            #break
        if action=="深蹲"and search1=='有':
            action_choose3=2
            search.append(squat)
            search1=input("還有嗎?(有/沒有)")
            #break
        if action=="仰臥起坐"and search1=='有':
            action_choose3=3
            search.append(situp)
            search1=input("還有嗎?(有/沒有)")
            #break
        if action=="棒式"and search1=='有':
            action_choose3=4
            search.append(stick)
            search1=input("還有嗎?(有/沒有)")
            #break
        if action=="全部"and search1=='有':
            action_choose3=5
            search.append(toss)
            search.append(serve)
            search.append(squat)
            search.append(situp)
            search.append(stick)
            #search1=input("還有嗎?")
            break
        if search1=="沒有":
            print(search1)
            break
    while (1):
        
        time_type1=input("請輸入想查詢的格式時間太長不建議天數( 年/月/日)")
        print(time_type1)
        if time_type1== "年" :
            time_choose1=0
            end=4
        if time_type1== "月" :
            time_choose1=1
            end=7
        if time_type1=="日" :
            #print(time_type1)
            time_choose1=2
            end=10
        if time_choose1==0 or time_choose1==1 or time_choose1==2 :
            print(time_choose1)
            break
    while (1):
        time_type2=input("是否特定查詢 yes/no")
        
        if time_type2=="是" :
            time_choose2=1
            print(time_type2)
            
                
        elif time_type2=="否" :
            time_choose2=0
        else:
            time_choose2=3
        if time_choose2==1 or time_choose2==0:
                break
    while (1):
        data_type=input("是否要去除沒訓練的天數")
        
        if data_type=="是" :
            data_choose=1
            print(time_type2)
            
                
        elif data_type=="否" :
            data_choose=0
        else:
            data_choose=3
        if data_choose==1 or data_choose==0:
                break            
    
    
    timeset=set()
    total=dict()
    file = open("timestamp.txt", "r")
    for line in file.readlines():
        #base64_bytes = line.encode("ascii")
        #sample_string_bytes = base64.b64decode(base64_bytes)
        #sample_string = sample_string_bytes.decode("ascii")
        dataset = json.loads(line)
        if dataset["time"][0:int(end)]  not in timeset:
            timeset.add(dataset["time"][0:int(end)])
            total[dataset["time"][0:int(end)]]=dict()
            total[dataset["time"][0:int(end)]]['toss'] = 0
            total[dataset["time"][0:int(end)]]['serve'] = 0
            total[dataset["time"][0:int(end)]]['squat'] = 0
            total[dataset["time"][0:int(end)]]['situp'] = 0
            total[dataset["time"][0:int(end)]]['stick'] = 0
        total[dataset["time"][0:int(end)]]['toss']+=dataset["action"]['toss']
        total[dataset["time"][0:int(end)]]['serve']+=dataset["action"]['serve']
        total[dataset["time"][0:int(end)]]['squat']+=dataset["action"]['squat']
        total[dataset["time"][0:int(end)]]['situp']+=dataset["action"]['situp']
        total[dataset["time"][0:int(end)]]['stick']+=dataset["action"]['stick']
        
        #print(dataset['time'][0:int(end)])
        #print(total[dataset["time"][0:int(end)]]['toss'])
    file.close()
    
    
    #print(data)
    #dataset = json.loads(data)
    #print(dataset)
    time=[]
    time1=[]
    for i in total:
        print(i)
        #np.insert(time,-1,i)
        time.append(i)
        toss.append(total[i]['toss'])
        serve.append(total[i]['serve'])
        squat.append(total[i]['squat'])
        situp.append(total[i]['situp'])
        stick.append(total[i]['stick'])
    width=0.15 
    print(len(time))
    print(stick)
    print(toss)
    #time= list(map(int,time))
    print(time)
    for i in range(len(time)):
        time1.append(i+1)
    x1=[p for p in time1]
    x2=[p-width for p in time1]
    x3=[p+ width for p in time1]
    x4=[p -2* width for p in time1]
    x5=[p + 2*width for p in time1]
    color=['#E8837E','#EFB28C','#EED19C','#ACBA90','#749D9B']
    x=[x1,x2,x3,x4,x5]
    #plt.figure(0)
    
    
    for i in range(len(search)):
        print(x[i]," ",search[i]," ",str(search[i])," ",color[i])
        a.bar(x[i], search[i], label=str(search[i]),color=color[i], align = "edge", width = 0.15) #繪製長條圖
    #a.bar(x1, toss, label='toss',color='#EFB28C', align = "edge", width = 0.15)  #繪製長條圖
    #a.bar(x2, serve, label='serve',color='#EED19C', align = "edge", width = 0.15) #繪製長條圖
    
    #plt.bar(time[::1],toss[::1],color=(201/255,109/255,81/255),label="toss")
    #plt.bar(time[::1],serve[::1],color=(70/255,140/255,156/255),label="serve")
    a.set_title("Personal Training") # title
    a.set_ylabel("count") # y label
    a.set_xlabel("Day") # x label
    
    colors = {'toss':'#FFC9DE', 'serve':'green','squat':'#FFC9DE', 'situp':'green','stick':'#FFC9DE'}  
    labels = list(colors.keys())
    a.legend(labels)
    a.set_xticks(time1)
    a.set_xticklabels(time)
    '''
    plt.savefig("output.png")
    #plt.close()
    cv2.waitKey(0)
    titlename=['time','toss','serve']
    a=np.asarray([time[::-1],toss[::-1],serve[::-1]])
    a=a.T
    a=np.insert(a,0,titlename,0)#numpy.insert(arr,obj,value,axis=None)
    # save
    np.savetxt("volleycsv.csv",a,fmt='%s',delimiter=',')
    # read
    im = Image.open('output.png')
    im.show()
    #try:
    
    #os.remove('output.png')
    #except OSError as e:
    #print(e)
    
    '''
    # 将绘制的图形显示到tkinter:创建属于root的canvas画布,并将图f置于画布上
    canvas = FigureCanvasTkAgg(f, master=root)
    canvas.draw()  # 注意show方法已经过时了,这里改用draw
    canvas.get_tk_widget().pack(side=tkinter.TOP,  # 上对齐
                                fill=tkinter.BOTH,  # 填充方式
                                expand=tkinter.YES)  # 随窗口大小调整而调整
    
    # matplotlib的导航工具栏显示上来(默认是不会显示它的)
    toolbar = NavigationToolbar2Tk(canvas, root)
    toolbar.update()
    canvas._tkcanvas.pack(side=tkinter.TOP,  # get_tk_widget()得到的就是_tkcanvas
                          fill=tkinter.BOTH,
                          expand=tkinter.YES)
    
    
    def on_key_event(event):
        """键盘事件处理"""
        print("你按了%s" % event.key)
        key_press_handler(event, canvas, toolbar)
    
    
    # 绑定上面定义的键盘事件处理函数
    canvas.mpl_connect('key_press_event', on_key_event)
    
    
    def _quit():
        """点击退出按钮时调用这个函数"""
        root.quit()  # 结束主循环
        root.destroy()  # 销毁窗口
    
    
    # 创建一个按钮,并把上面那个函数绑定过来
    button = tkinter.Button(master=root, text="退出", command=_quit)
    # 按钮放在下边
    button.pack(side=tkinter.BOTTOM)
    
    # 主循环
    root.mainloop()
